const sounds = [
      {
        name: "Cowbell",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/8[kb]COWBELL1.aif.mp3",
        keyCode: 81,
        key: "Q",
        color: "red"
      }, 
      {
        name: "Snare",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/31[kb]SNARE2.aif.mp3",
        keyCode: 87,
        key: "W",
        color: "orange"
      },
      {
        name: "Clap",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/54[kb]CLAPPO0.aif.mp3",
        keyCode: 69,
        key: "E",
        color: "yellow"
      },
      {
        name: "HH-Closed",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/12[kb]HHCLOSE2.aif.mp3",
        keyCode: 65,
        key: "A",
        color: "green"
      },
      {
        name: "HH-Open",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/31[kb]HHOPEN1.aif.mp3",
        keyCode: 83,
        key: "S",
        color: "blue"
      },
      {
        name: "Rim-Shot",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/14[kb]RIMSHOT1.aif.mp3",
        keyCode: 68,
        key: "D",
        color: "indigo"
      }, 
      {
        name: "Kick",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20and%20SINGLE%20HITS/kicks/69[kb]thick_acoustic_bd.aif.mp3",
        keyCode: 90,
        key: "Z",
        color: "purple"
      },
      {
        name: "Ride",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/125[kb]RIDE.aif.mp3",
        keyCode: 88,
        key: "X",
        color: "maroon"
      },
      {
        name: "Crash",
        source: "https://sampleswap.org/samples-ghost/DRUMS%20(FULL%20KITS)/heavy-drumkit/102[kb]CRASH.aif.mp3",
        keyCode: 67,
        key: "C",
        color: "gold"
      }
];

const buttonStyle = {
  display: 'inline-block',
  position: 'relative',
  width: '19vh',
  height: '19vh',
  color: 'black',
  backgroundColor: 'white',
  fontSize: '5vh',
  borderRadius: '20%',
  borderWidth: '1px',
  borderStyle: 'solid',
  borderColor: 'black'
}

const activeButtonStyle = {
  display: 'inline-block',
  position: 'relative',
  width: '19vh',
  height: '19vh',
  color: "white",
  backgroundColor: 'black',
  fontSize: '5vh',
  borderRadius: '20%',
  borderWidth: '1px',
  borderStyle: 'solid',
  borderColor: 'black'
}

const CreateAudio = (props) => {
   return( 
     <a style={props.styleButton}  className="drum-pad" id={props.drumpadId} title={props.buttonKeyCode} onClick= {props.play}>
      <audio id={props.audioId} className="clip" preload="auto" src={props.url} type="audio/mpeg">
      </audio>
       <p>{props.textName}</p>
     </a>
  );
};

class DrumApp extends React.Component {
  constructor(props) {
    super(props);
    this.state= {
      sound: "",
      button: buttonStyle
    }
    this.handleKeyDown = this.handleKeyDown.bind(this);
    this.activateSound = this.activateSound.bind(this);
    this.activateButton = this.activateButton.bind(this);
  }
  
  activateSound(elementId, elementName, buttonId) {
    document.getElementById(elementId).currentTime=0;
    document.getElementById(elementId).play();
    this.setState({
      sound: elementName
    });
    this.activateButton(buttonId);
    setTimeout(()=> this.activateButton(buttonId), 100);
  }
  
  activateButton(item) {
    document.getElementById(item.name).style.backgroundColor === 'white' ?
      document.getElementById(item.name).style.backgroundColor = item.color :
      document.getElementById(item.name).style.backgroundColor = 'white';
  }
  
  handleKeyDown(event) {
     for (var i=0; i<sounds.length; i++) {
         if (event.keyCode == sounds[i].keyCode) {
          document.getElementById(sounds[i].name).click();
         }
     }
  }
  
  componentDidMount() {
    document.addEventListener('keydown', this.handleKeyDown);
  }
  componentWillUnmount() {
    document.removeEventListener('keydown', this.handleKeyDown);
  }
  
  render() { 
    let drumpads = sounds.map((obj, index, array) => {
      return(
        <CreateAudio
        drumpadId={array[index].name}
        audioId={array[index].key}
        buttonKeyCode={array[index].keyCode}
        styleButton={this.state.button}
        url={array[index].source}
        play={() => this.activateSound(array[index].key, array[index].name, array[index])}
        textName={array[index].key}
        />
      )
    });
    return(
      <div id="drum-machine">
        <h1 id="title">Drum Machine</h1>
        <div id="drumDisplay">
          <div className="container">
            {drumpads}
          </div>
        </div>
        <div id="displayBox">
          <p id="display"><strong>{this.state.sound}</strong></p>
        </div>
      </div>
    );
  }
};

ReactDOM.render(<DrumApp />, document.getElementById("app"));